# Task ID: 19
# Title: Implement System-Wide Admin User Type with Full Platform Management
# Status: pending
# Dependencies: 2, 3, 5, 8
# Priority: high
# Description: Create a comprehensive admin user type with elevated privileges for platform management, including user management, content moderation, subscription overrides, system configuration, and analytics access
# Details:
Extend the user type system by adding 'admin' role to the existing user schema. Update database schema with admin-specific fields: isAdmin boolean flag, adminLevel (super/regular), adminPermissions JSON field for granular permissions, lastAdminActivityAt timestamp. Create comprehensive permission system with modules: USER_MANAGEMENT (view all users, suspend/unsuspend accounts, reset passwords, force logout), CONTENT_MODERATION (view all notes/folders, delete inappropriate content, flag/unflag content, view reports), SUBSCRIPTION_OVERRIDE (grant/revoke pro status, extend trials, view billing history, issue refunds), SYSTEM_CONFIG (manage feature flags, update system settings, maintenance mode control, API rate limits), ANALYTICS_ACCESS (view platform metrics, export data, custom queries, user behavior tracking). Implement admin middleware extending existing auth middleware to check admin status and specific permissions before allowing access to admin routes. Build admin dashboard at /admin with clean, data-dense interface featuring: User Management section with searchable user list, quick actions (suspend, reset password, view activity), bulk operations support; Content Moderation queue showing flagged content, recent uploads, suspicious activity patterns; System Stats displaying real-time metrics (active users, storage usage, API calls, error rates); Configuration panel for feature toggles, system limits, maintenance scheduling; Audit Log showing all admin actions with timestamps, affected resources, and rollback capabilities. Use React Query for data fetching with 30-second refresh intervals. Implement row-level security for admin operations in Supabase. Add admin activity logging to track all administrative actions. Create admin-specific API routes under /api/admin/* with proper authentication and rate limiting. Use shadcn/ui data-table component for user lists with sorting, filtering, and pagination. Implement command palette (Cmd+K) for quick admin actions. Add email notifications for critical admin events (mass user suspension, system config changes). Create admin onboarding flow for new admins with permission overview. Set up two-factor authentication requirement for admin accounts.

# Test Strategy:
Test admin role assignment and permission inheritance. Verify middleware blocks non-admin users from admin routes. Test each permission module independently: create test scenarios for user management (suspend/unsuspend flow), content moderation (flag and delete content), subscription overrides (grant pro status), system configuration (toggle features), and analytics access (view metrics). Validate audit logging captures all admin actions with correct metadata. Test admin dashboard performance with 10,000+ users. Verify real-time updates work for system metrics. Test command palette functionality and keyboard shortcuts. Ensure RLS policies prevent data leaks. Test two-factor authentication enforcement. Verify email notifications send for critical events. Test permission granularity by creating limited admin accounts. Validate bulk operations don't timeout. Test rollback functionality for reversible admin actions. Ensure admin actions are atomic and don't leave system in inconsistent state.

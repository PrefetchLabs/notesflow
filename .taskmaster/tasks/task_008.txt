# Task ID: 8
# Title: Build Note Management System
# Status: done
# Dependencies: 6, 7
# Priority: high
# Description: Create the complete note creation, listing, and management functionality
# Details:
Implement note CRUD operations with optimistic updates. Create note list component in sidebar showing title and last modified date. Add 'New Note' button with Cmd/Ctrl+N shortcut. Implement note title extraction from first line of content. Add note search with fuzzy matching using fuse.js@7.0.0 (search both title and content). Create note switching with unsaved changes warning. Implement note deletion with soft delete initially (move to trash). Add keyboard navigation: Cmd/Ctrl+P for quick note switcher. Store active note ID in URL for shareable links. Implement recently accessed notes (last 5) at top of sidebar. Auto-create 'Untitled Note' when user starts typing in empty state. Add subtle transition animations when switching between notes.

# Test Strategy:
Test complete note lifecycle: create, edit, save, delete. Verify search works accurately for both titles and content. Test keyboard shortcuts on different operating systems. Ensure note switching preserves unsaved changes. Test URL-based note loading. Verify recently accessed notes update correctly. Test performance with 100+ notes.

# Subtasks:
## 1. Implement Note CRUD API endpoints [done]
### Dependencies: None
### Description: Create server actions for creating, reading, updating, and deleting notes using Drizzle ORM and Supabase
### Details:
Implement server actions in app/actions/notes.ts with proper TypeScript types, error handling, and Supabase RLS policies. Include createNote, getNote, updateNote, deleteNote (soft delete), and listNotes functions. Use Drizzle ORM for type-safe database operations.

## 2. Create note database schema and migrations [done]
### Dependencies: None
### Description: Define Drizzle schema for notes table with soft delete support and proper indexes
### Details:
Create notes table schema in lib/db/schema.ts with fields: id (uuid), title, content, userId, createdAt, updatedAt, deletedAt (for soft delete), lastAccessedAt. Add indexes for userId, deletedAt, and full-text search on title/content.

## 3. Build NoteList component with sorting [done]
### Dependencies: 8.1, 8.2
### Description: Create a responsive note list component using shadcn/ui with multiple sorting options
### Details:
Implement components/notes/NoteList.tsx with sorting by: last modified, created date, alphabetical, last accessed. Use shadcn/ui Select for sort dropdown. Display note title, preview text, and timestamps. Implement virtualization for large lists using @tanstack/react-virtual.

## 4. Implement new note creation flow [done]
### Dependencies: 8.1, 8.3
### Description: Create UI and logic for creating new notes with auto-generated untitled names
### Details:
Add 'New Note' button to NoteList header. Auto-generate title as 'Untitled Note' with timestamp. Create note immediately on button click and navigate to editor. Use optimistic updates with React Query for instant UI feedback.

## 5. Build title extraction logic [done]
### Dependencies: 8.1
### Description: Implement intelligent title extraction from note content
### Details:
Create lib/utils/titleExtraction.ts to extract title from first line of content (max 50 chars). If first line is empty or too short, use first non-empty line. Fall back to 'Untitled Note' if no suitable content. Update title automatically when content changes.

## 6. Implement fuzzy search functionality [done]
### Dependencies: 8.1, 8.3
### Description: Add full-text search with fuzzy matching across note titles and content
### Details:
Use Fuse.js for client-side fuzzy search. Index notes by title and content preview. Implement search debouncing (300ms). Highlight matching terms in results. Add search input to NoteList header with clear button. Store search query in URL params.

## 7. Handle note switching with unsaved changes [done]
### Dependencies: 8.1, 8.4
### Description: Implement confirmation dialog and auto-save for unsaved changes when switching notes
### Details:
Track dirty state in note editor using isDirty flag. Show confirmation dialog using shadcn/ui AlertDialog when switching notes with unsaved changes. Offer options: Save & Continue, Discard Changes, Cancel. Implement auto-save with 5-second debounce.

## 8. Implement soft delete functionality [done]
### Dependencies: 8.1, 8.2, 8.3
### Description: Add soft delete with trash/restore features
### Details:
Add delete button to note editor and list items. Set deletedAt timestamp instead of hard delete. Create Trash view to show deleted notes. Add restore and permanent delete options. Auto-purge notes deleted > 30 days ago. Show toast notifications for delete/restore actions.
<info added on 2025-07-09T09:55:39.882Z>
Successfully implemented soft delete functionality with the following completions:

Backend Implementation:
- Added deletedAt timestamp field to notes schema with database index for performance
- Updated DELETE endpoint to perform soft delete by setting deletedAt and isTrashed flags
- Updated GET endpoints to filter out soft-deleted notes using isNull(notes.deletedAt) condition
- Created /api/notes/trash endpoint to retrieve trashed notes
- Created /api/notes/[id]/restore endpoint to restore notes from trash
- Created /api/notes/[id]/permanent-delete endpoint for permanent deletion
- Applied database migrations successfully

UI Updates:
- Updated delete action to show "Note moved to trash" confirmation message

Remaining Work:
- Create UI for trash view to display deleted notes
- Add restore and permanent delete action buttons to trash view
- These UI components will be addressed in a future task
</info added on 2025-07-09T09:55:39.882Z>

## 9. Set up keyboard navigation [done]
### Dependencies: 8.3, 8.4, 8.6
### Description: Implement comprehensive keyboard shortcuts for note management
### Details:
Use react-hotkeys-hook for shortcuts: Cmd/Ctrl+N (new note), Cmd/Ctrl+S (save), Cmd/Ctrl+F (search), Cmd/Ctrl+Delete (delete), Arrow keys (navigate list), Enter (open selected). Show keyboard shortcuts in UI tooltips. Add help modal with all shortcuts.
<info added on 2025-07-09T10:23:41.426Z>
Successfully implemented comprehensive keyboard navigation system with react-hotkeys-hook library. Created KeyboardShortcutsProvider with global shortcuts for note creation (Cmd/Ctrl+N), saving (Cmd/Ctrl+S), search focus (Cmd/Ctrl+F), deletion (Cmd/Ctrl+Delete), quick switcher (Cmd/Ctrl+K), help modal (Cmd/Ctrl+Shift+?), and dialog closure (Escape). Developed useKeyboardNavigation hook for folder tree navigation using arrow keys with expand/collapse functionality and Enter for selection. Integrated visual selection indicators with ring styling in FolderTreeWithNotes component. Added keyboard shortcuts help dialog displaying all available shortcuts. Successfully connected save/delete events between keyboard provider and note editor components.
</info added on 2025-07-09T10:23:41.426Z>

## 10. Implement URL-based routing [done]
### Dependencies: 8.1, 8.3
### Description: Add Next.js App Router routes for note navigation and deep linking
### Details:
Create app/notes/[id]/page.tsx for individual note routes. Use parallel routes for list/editor split view. Update URL when selecting notes. Handle invalid note IDs with redirect to notes list. Preserve scroll position and search state in URL.

## 11. Build recently accessed notes feature [done]
### Dependencies: 8.1, 8.2, 8.3
### Description: Track and display recently accessed notes with quick access
### Details:
Update lastAccessedAt timestamp when opening notes. Add 'Recent' section to NoteList showing last 5 accessed notes. Store recent note IDs in localStorage for offline access. Add quick switcher modal (Cmd/Ctrl+K) showing recent notes at top.

